// I think this is standard dfs? Just find connected nodes and find the minimum that would spread. I pretty much came up with this

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int max_inf = INT_MAX, best_node = initial[0];
        sort(initial.begin(), initial.end());

        for(int excluded:initial) {
            set<int> s;
            for(int k:initial) {
                if(k != excluded) {
                    vector<bool> visited(graph.size(), false);
                    find_total_infected(graph, visited, k, s);
                }
            }
            if(s.size() < max_inf) {
                best_node = excluded;
                max_inf = s.size();
            }
        }
        return best_node;
    }

    void find_total_infected(vector<vector<int>>& graph, vector<bool> &visited, int k, set<int> &s) {
        int infected = 1;
        visited[k] = true;
        s.insert(k);

        for(int i = 0; i < graph[k].size(); i += 1) {
            if(graph[k][i] == 1 && !visited[i]) {
                find_total_infected(graph, visited, i, s);
            }
        }
    }
};
